'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _clsx = require('clsx');

var _clsx2 = _interopRequireDefault(_clsx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WordCounter = function (_Component) {
  _inherits(WordCounter, _Component);

  function WordCounter() {
    _classCallCheck(this, WordCounter);

    return _possibleConstructorReturn(this, (WordCounter.__proto__ || Object.getPrototypeOf(WordCounter)).apply(this, arguments));
  }

  _createClass(WordCounter, [{
    key: 'getWordCount',
    value: function getWordCount(editorState) {
      var plainText = editorState.getCurrentContent().getPlainText('');
      var regex = /(?:\r\n|\r|\n)/g; // new line, carriage return, line feed
      var cleanString = plainText.replace(regex, ' ').trim(); // replace above characters w/ space
      var wordArray = cleanString.match(/\S+/g); // matches words according to whitespace
      return wordArray ? wordArray.length : 0;
    }
  }, {
    key: 'getClassNames',
    value: function getClassNames(count, limit) {
      var _props = this.props,
          _props$theme = _props.theme,
          theme = _props$theme === undefined ? {} : _props$theme,
          className = _props.className;

      var defaultStyle = (0, _clsx2.default)(theme.counter, className);
      var overLimitStyle = (0, _clsx2.default)(theme.counterOverLimit, className);
      return count > limit ? overLimitStyle : defaultStyle;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          store = _props2.store,
          limit = _props2.limit;

      var count = this.getWordCount(store.getEditorState());
      var classNames = this.getClassNames(count, limit);

      return _react2.default.createElement(
        'span',
        { className: classNames },
        count
      );
    }
  }]);

  return WordCounter;
}(_react.Component);

WordCounter.propTypes = {
  theme: _propTypes2.default.any,
  limit: _propTypes2.default.number
};
exports.default = WordCounter;
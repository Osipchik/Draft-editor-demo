'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _CharCounter = require('./CharCounter');

var _CharCounter2 = _interopRequireDefault(_CharCounter);

var _WordCounter = require('./WordCounter');

var _WordCounter2 = _interopRequireDefault(_WordCounter);

var _LineCounter = require('./LineCounter');

var _LineCounter2 = _interopRequireDefault(_LineCounter);

var _CustomCounter = require('./CustomCounter');

var _CustomCounter2 = _interopRequireDefault(_CustomCounter);

var _styles = {
  "counter": "draftJsUndoPlugin__counter__2wZYK",
  "counterOverLimit": "draftJsUndoPlugin__counterOverLimit__3_8bn"
};

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTheme = {
  counter: _styles2.default.counter,
  counterOverLimit: _styles2.default.counterOverLimit
};

exports.default = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var store = {
    getEditorState: undefined,
    setEditorState: undefined
  };
  // Styles are overwritten instead of merged as merging causes a lot of confusion.
  //
  // Why? Because when merging a developer needs to know all of the underlying
  // styles which needs a deep dive into the code. Merging also makes it prone to
  // errors when upgrading as basically every styling change would become a major
  // breaking change. 1px of an increased padding can break a whole layout.
  var theme = config.theme ? config.theme : defaultTheme;
  var DecoratedCharCounter = function DecoratedCharCounter(props) {
    return _react2.default.createElement(_CharCounter2.default, _extends({}, props, { theme: theme, store: store }));
  };
  var DecoratedWordCounter = function DecoratedWordCounter(props) {
    return _react2.default.createElement(_WordCounter2.default, _extends({}, props, { theme: theme, store: store }));
  };
  var DecoratedLineCounter = function DecoratedLineCounter(props) {
    return _react2.default.createElement(_LineCounter2.default, _extends({}, props, { theme: theme, store: store }));
  };
  var DecoratedCustomCounter = function DecoratedCustomCounter(props) {
    return _react2.default.createElement(_CustomCounter2.default, _extends({}, props, { theme: theme, store: store }));
  };
  return {
    CharCounter: DecoratedCharCounter,
    WordCounter: DecoratedWordCounter,
    LineCounter: DecoratedLineCounter,
    CustomCounter: DecoratedCustomCounter,
    initialize: function initialize(_ref) {
      var getEditorState = _ref.getEditorState,
          setEditorState = _ref.setEditorState;

      store.getEditorState = getEditorState;
      store.setEditorState = setEditorState;
    }
  };
};